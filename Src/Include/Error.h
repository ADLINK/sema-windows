#pragma once

#define EAPI_UINT8_C(x) ((uint8_t)(x))
#define EAPI_UINT16_C(x) ((uint16_t)(x))
#define EAPI_UINT32_C(x) ((uint32_t)(x))


enum EERROR
{
	EAPI_STATUS_SUCCESS = EAPI_UINT32_C(0),
	EAPI_STATUS_ERROR = EAPI_UINT32_C(0xFFFFF0FF),
	EAPI_STATUS_MORE_DATA = EAPI_UINT32_C(0xFFFFF9FF),
	EAPI_STATUS_WRITE_ERROR = EAPI_UINT32_C(0xFFFFFAFE),
    EAPI_STATUS_READ_ERROR = EAPI_UINT32_C(0xFFFFFAFf),
	EAPI_STATUS_BUSY_COLLISION = EAPI_UINT32_C(0xFFFFFBFD),
	EAPI_STATUS_TIMEOUT = EAPI_UINT32_C(0xFFFFFBFE),
	EAPI_STATUS_NOT_FOUND = EAPI_UINT32_C(0xFFFFFBFF),
	EAPI_STATUS_UNSUPPORTED = EAPI_UINT32_C(0xFFFFFCFF),
	EAPI_STATUS_RUNNING = EAPI_UINT32_C(0xFFFFFEFA),
	EAPI_STATUS_INVALID_BITMASK = EAPI_UINT32_C(0xFFFFFEFB),
	EAPI_STATUS_INVALID_DIRECTION = EAPI_UINT32_C(0xFFFFFEFC),
	EAPI_STATUS_INVALID_BLOCK_LENGTH = EAPI_UINT32_C(0xFFFFFEFD),
	EAPI_STATUS_INVALID_BLOCK_ALIGNMENT = EAPI_UINT32_C(0xFFFFFEFE),
	EAPI_STATUS_INVALID_PARAMETER = EAPI_UINT32_C(0xFFFFFEFF),
	EAPI_STATUS_DRIVER_TIMEOUT = EAPI_UINT32_C(0xFFFFFFFC),
	EAPI_STATUS_ALLOC_ERROR = EAPI_UINT32_C(0xFFFFFFFD),
	EAPI_STATUS_INITIALIZED = EAPI_UINT32_C(0xFFFFFFFE),
	EAPI_STATUS_NOT_INITIALIZED = EAPI_UINT32_C(0xFFFFFFFF),

};
